
// We will run our own tournament
#include "tournament.h"

// Define g_manager
TournamentManager TournamentManager::g_manager;

// Provide a real implementation of Reset to use for
// generational tournamenting.
void TournamentManager::Reset() {
  while (!m_players.empty()) {
    m_players.pop_back();
  }
  m_scores.clear();
  m_ids.clear();
}


// Keep them out of an anonymous namespace so we can access them,
// and tell them not to bother registering themselves.
#define OTHELLO_GOD othello_god
#include "mattmoor/board-value-player.cc"
#include "mattmoor/square-value-player.cc"
#include "mattmoor/depth-value-player.cc"

// Bring in our genetic algorithm template
#include "god.h"

#define PLAYER othello_god::DepthValuePlayer
#define PPLAYER shared_ptr<Player>

#define RAND() (rand() & 0xffff)

namespace {
const std::string* board_to_str(const uint32 (&board)[8][8]) {
  std::ostringstream oss;
  for (uint32 row = 0; row < 8; ++row) {
    for (uint32 col = 0; col < 8; ++col) {
      oss << (board[row][col]) << " ";
    }
  }

  std::string* str_board = new std::string(oss.str());

  return str_board;
}

void random_board(uint32 (*board_)[8][8]) {
  uint32 (&board)[8][8] = *board_;

  for (uint32 row = 0; row < 8; ++row) {
    for (uint32 col = 0; col < 8; ++col) {
      board[row][col] = RAND();
    }
  }
}

uint32 MAX(uint32 lhs, uint32 rhs) {
  return lhs > rhs ? lhs : rhs;
}

uint32 MIN(uint32 lhs, uint32 rhs) {
  return lhs < rhs ? lhs : rhs;
}

uint32 AVG(uint32 lhs, uint32 rhs) {
  return (lhs + rhs) >> 1;
}

// Rotate through several strategies to get a true mix of the boards
uint32 HYBRID(uint32 lhs, uint32 rhs) {
  static uint32 counter = 0;
  switch ((counter += 3) & 7) {
  case 0:
    return lhs;  // bias towards mom
  case 1:
    return rhs;  // bias towards dad
  case 2:
    return MAX(lhs, rhs);  // dominant
  case 3:
    return MIN(lhs, rhs);  // recessive
  case 4:
    return RAND();  // mutation
  case 5:
    return lhs;
  case 6:
    counter += RAND();
    return RAND();
  case 7:
    return AVG(lhs, rhs);
  default:
    assert(!"Unreached");
  }
}

template<uint32 (*OP)(uint32,uint32)>
void merge_board(const uint32 (&board1)[8][8],
		 const uint32 (&board2)[8][8],
		 uint32 (*board3_)[8][8]) {
  uint32 (&board3)[8][8] = *board3_;

  for (uint32 row = 0; row < 8; ++row) {
    for (uint32 col = 0; col < 8; ++col) {
      // Average all the square values
      board3[row][col] = OP(board1[row][col], board2[row][col]);
    }
  }
}
}  // anonymous namespace

template <>
std::vector<Individual<PPLAYER>*> Individual<PPLAYER>::Breed(const Individual<PPLAYER>& mate) const {
  std::vector<Individual<PPLAYER>*> children;
  const auto* player1 = static_cast<const PLAYER*>(info().get());
  const auto* player2 = static_cast<const PLAYER*>(mate.info().get());

#define add_child(OP) \
  {									\
    uint32 board[8][8];							\
    merge_board<OP>(player1->values(),					\
		    player2->values(),					\
		    &board);						\
    PPLAYER newt(new PLAYER(board));					\
    children.push_back(new Individual<PPLAYER>(newt));			\
  }

  switch (RAND() & 3) {
   case 0:
    add_child(AVG);
    break;
   case 1:
     add_child(MIN);
     break;
   case 2:
     add_child(MAX);
     break;
   case 3:
     add_child(HYBRID);
     break;
  }
  add_child(HYBRID);

  // TODO(mattmoor): Need to stop going through strings for passing the board through.
  // TODO(mattmoor): Need to incorporate rotation and reflection, it is a highly symmetrical game.

#undef add_child

  return children;
}

template <>
int Individual<PPLAYER>::Combat(const Individual<PPLAYER>& adversary) const {
  // Check that going through the tournament manager keeps us out of one
  // on one combat
  assert(!"Unreached");
  return 0;
}

template <>
void God<PPLAYER>::Combat() {
  // Clear all entrants
  TournamentManager::g_manager.Reset();

  // Clear everyone's fitness
  for (auto* xx : population_) {
    xx->ResetFitness();
    TournamentManager::g_manager.RegisterPlayer(xx->info());
  }

  TournamentManager::g_manager.RunTournament();

  for (auto* xx : population_) {
    xx->AddFitness(TournamentManager::g_manager.score(xx->info().get()));
  }
}

template <>
Individual<PPLAYER>* God<PPLAYER>::New() {
  uint32 board[8][8];
  random_board(&board);
  PPLAYER newt(new PLAYER(board));
  auto* player = new Individual<PPLAYER>(newt);
  return player;
}

template <>
void God<PPLAYER>::Display() {
  for (auto* ind : population_) {
    auto* p = static_cast<mattmoor::ValuePlayer*>(ind->info().get());
    shared_ptr<const std::string> str(board_to_str(p->values()));
    std::cout << *str << std::endl;
  }
}


//  50 5 15 15 15 15 5 50
//  5 1 5 1 1 5 1 5
//  15 1 10 8 8 10 5 15
//  15 1 8 5 5 8 1 15
//  15 1 8 5 5 8 1 15
//  15 5 10 8 8 10 5 15
//  5 1 5 1 1 5 1 5
//  50 5 15 15 15 15 5 50
// 63635 42931 1395 20614 59675 6695 11481 24772 59705 53079 33302 46456 13121 62905 24117 10261 47336 41200 65084 59603 22232 45544 10702 44830 60696 53092 44794 38451 11112 51421 23292 24409 58930 1043 34561 63558 47161 59147 37903 29727 42469 27594 50289 60952 31749 23032 55862 15150 29336 23772 38602 34028 11464 11370 60123 493 37157 14464 33306 52464 20125 11983 8870 57382 
// 63635 42931 1395 57064 59675 6695 11481 24772 59705 53079 33302 36149 13121 62905 24117 10261 47336 41200 65084 48492 22232 45544 10702 44830 60696 53092 44794 13908 11112 51421 23292 24409 58930 1043 34561 55850 47161 59147 37903 29727 42469 27594 50289 3572 31749 23032 55862 15150 29336 23772 38602 11808 11464 11370 60123 493 37157 14464 33306 29602 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 38318 59675 6695 11481 24772 59705 53079 33302 54303 13121 62905 24117 10261 47336 41200 65084 28025 22232 45544 10702 44830 60696 53092 44794 15915 11112 51421 23292 24409 58930 1043 34561 42811 47161 59147 37903 29727 42469 27594 50289 7466 31749 23032 55862 15150 29336 23772 38602 47071 11464 11370 60123 493 37157 14464 33306 49370 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 
// 63635 42931 1395 57705 59675 6695 11481 24772 59705 53079 33302 55977 13121 62905 24117 10261 47336 41200 65084 41890 22232 45544 10702 44830 60696 53092 44794 3453 11112 51421 23292 24409 58930 1043 34561 44222 47161 59147 37903 29727 42469 27594 50289 9445 31749 23032 55862 15150 29336 23772 38602 29040 11464 11370 60123 493 37157 14464 33306 37963 20125 11983 8870 57382 

// 28872 25717 25613 47840 59624 55878 16372 44686 3273 33217 54922 53783 23642 19598 3291 4392 37122 20345 43068 2639 22442 27028 41578 59594 23774 12579 7976 54933 43408 15718 12145 51781 39372 9484 28073 53722 64311 2863 15849 43798 28731 29303 64312 25926 56487 37726 5479 9541 64692 50095 7456 584 33569 60680 50750 11190 48587 36689 6325 62917 28819 57477 25550 43125 
// 28872 25717 25613 13733 59624 55878 16372 44686 3273 33217 54922 61828 23642 19598 3291 4392 37122 20345 43068 4845 22442 27028 41578 59594 23774 12579 7976 37217 43408 15718 12145 51781 39372 9484 28073 45941 64311 2863 15849 43798 28731 29303 64312 51175 56487 37726 5479 9541 64692 50095 7456 12698 33569 60680 50750 11190 48587 36689 6325 44166 28819 57477 25550 43125 
// 28872 25717 25613 14763 59624 55878 16372 44686 3273 33217 54922 15698 23642 19598 3291 4392 37122 20345 43068 56735 22442 27028 41578 59594 23774 12579 7976 1924 43408 15718 12145 51781 39372 9484 28073 41998 64311 2863 15849 43798 28731 29303 64312 53441 56487 37726 5479 9541 64692 50095 7456 26609 33569 60680 50750 11190 48587 36689 6325 6904 28819 57477 25550 43125 
// 28872 25717 25613 37779 59624 55878 16372 44686 3273 33217 54922 54184 23642 19598 3291 4392 37122 20345 43068 62160 22442 27028 41578 59594 23774 12579 7976 16027 43408 15718 12145 51781 39372 9484 28073 28914 64311 2863 15849 43798 28731 29303 64312 15932 56487 37726 5479 9541 64692 50095 7456 61068 33569 60680 50750 11190 48587 36689 6325 24627 28819 57477 25550 43125 
// 28872 25717 25613 26956 59624 55878 16372 44686 3273 33217 54922 15633 23642 19598 3291 4392 37122 20345 43068 13551 22442 27028 41578 59594 23774 12579 7976 19487 43408 15718 12145 51781 39372 9484 28073 39204 64311 2863 15849 43798 28731 29303 64312 12936 56487 37726 5479 9541 64692 50095 7456 46617 33569 60680 50750 11190 48587 36689 6325 16049 28819 57477 25550 43125 
// 28872 25717 25613 61946 59624 55878 16372 44686 3273 33217 54922 28841 23642 19598 3291 4392 37122 20345 43068 27761 22442 27028 41578 59594 23774 12579 7976 31680 43408 15718 12145 51781 39372 9484 28073 43324 64311 2863 15849 43798 28731 29303 64312 58118 56487 37726 5479 9541 64692 50095 7456 47103 33569 60680 50750 11190 48587 36689 6325 51599 28819 57477 25550 43125 
// 28872 25717 25613 2882 59624 55878 16372 44686 3273 33217 54922 19930 23642 19598 3291 4392 37122 20345 43068 13337 22442 27028 41578 59594 23774 12579 7976 38281 43408 15718 12145 51781 39372 9484 28073 29017 64311 2863 15849 43798 28731 29303 64312 36134 56487 37726 5479 9541 64692 50095 7456 49791 33569 60680 50750 11190 48587 36689 6325 23244 28819 57477 25550 43125 
// SUMMARY[board value player]: (80,11,0) +69
// SUMMARY[board value player]: (79,12,0) +67
// SUMMARY[board value player]: (78,13,0) +65
// SUMMARY[board value player]: (71,20,0) +51
// SUMMARY[board value player]: (69,20,2) +49
// SUMMARY[board value player]: (68,22,1) +46
// SUMMARY[board value player]: (65,22,4) +43

// 47462 11603 27891 17403 8768 838 7194 34986 13322 12151 13409 17876 16604 14541 21531 6273 1170 6348 11993 20095 20865 14142 7433 4482 19436 24492 21632 20825 5565 16201 19611 5120 9994 10818 30523 3282 23834 17805 18851 19034 2972 2770 10316 6552 10144 40466 15731 9379 7730 14061 7154 2868 17258 19836 11517 17808 24304 2523 14586 19282 10599 9604 15883 57938 
// 47462 11603 28770 20181 8768 14180 7194 34986 15105 12151 13409 19318 16604 14541 21531 6273 1170 6348 11993 20095 20865 21983 7433 4482 19436 24492 21768 21245 5565 16201 19611 5120 9994 10818 30523 3282 23834 17805 18851 19034 4413 5430 10316 11250 10144 40466 15731 9379 11887 14061 7154 2868 17258 19836 11517 17808 43295 2523 22332 19282 11867 9604 15883 57938 
// 47462 15190 28330 28518 8768 14180 8907 34986 24126 12151 13409 18597 16604 14541 21531 6273 33861 13869 11993 20095 20865 21983 26965 14035 19436 57365 21905 21245 6483 47305 19611 41754 9994 10818 34145 3282 23834 17805 18851 19034 4269 10857 10316 11250 19941 60545 15731 64863 9808 14061 7154 53663 17258 19836 11517 17808 43295 13657 22332 22512 11867 47351 15883 57938 
// 47462 11618 28330 20181 8768 14180 7194 34986 14213 12151 13409 18597 15754 14541 21531 6273 20287 13869 11993 20095 20865 21983 9938 9258 19436 24492 21836 21245 5565 16201 19611 14987 9994 10818 32334 11312 23834 17698 18851 19034 4269 5430 10316 11250 10144 40466 15731 9379 9808 14061 7154 2868 17258 19836 11517 17808 43295 4241 22332 18865 11867 9604 15883 57938 
// 47462 11603 28770 20181 8768 14180 7194 34986 15105 12151 13409 19318 15754 14541 21531 6273 1170 6348 11993 20095 20865 21983 7433 4482 19436 24492 21768 21245 5565 16201 19611 5120 9994 10818 30523 3282 23834 17698 18851 19034 4413 5430 10316 11250 10144 40466 15731 9379 11887 14061 7154 2868 17258 19836 11517 17808 43295 2523 22332 18865 11867 9604 15883 57938 
// 43097 11603 28770 20181 8768 23777 7194 55156 15105 12151 13409 20508 47400 33157 42263 30520 1170 6348 11069 22348 4069 30496 5435 36029 19436 24492 21768 34243 5565 16201 19611 43434 9994 10818 15654 40388 28006 30178 18851 19034 4413 32358 10316 11250 3337 40466 15731 9379 11887 34964 56192 10763 17258 19836 11517 17808 64110 2523 24259 19282 11867 58606 16473 57938 
// 47462 11618 28330 20181 8768 14180 7194 34986 14213 12151 13409 18597 16179 14541 21531 6273 20287 13869 11993 20095 20865 21983 9938 9258 19436 24492 21836 21245 5565 16201 19611 14987 9994 10818 32334 11312 23834 17751 18851 19034 4269 5430 10316 11250 10144 40466 15731 9379 9808 14061 7154 2868 17258 19836 11517 17808 43295 4241 22332 19073 11867 9604 15883 57938 


int main() {
  God<PPLAYER> god(5, 100, 3);

  // Squelch output from the tournament manager
  TournamentManager::g_manager.BeQuiet();

  std::cout << "Seeding population" << std::endl;
  god.BuildAdamAndEve();

  std::cout << "Go go, Darwin!" << std::endl;
  god.HandDarwinKeys();

  // Clear remaining entrants so that only the final few dtors
  // display after "Done"
  TournamentManager::g_manager.Reset();

  std::cout << "Done!" << std::endl;

  for (auto* ind : god.FinalPopulation()) {
    auto* p = static_cast<mattmoor::ValuePlayer*>(ind->info().get());
    shared_ptr<const std::string> str(board_to_str(p->values()));
    std::cout << *str << std::endl;
  }

  return 0;
}
